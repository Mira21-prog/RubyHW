p '1. Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
p "m = [1, 2, 3, 4, 5, 6, 7]"
m = [1, 2, 3, 4, 5, 6, 7]
p m.select.with_index { |word, idx| idx.even? } + m.select.with_index { |word, idx| idx.odd? }
p '-----------------------------------------------'
p '2. Дан целочисленный массив. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
p "m = [1, 2, 3, 4, 5, 6, 7]"
m = [1, 2, 3, 4, 5, 6, 7]
p m.select.with_index { |word, idx| idx.odd? } + m.select.with_index { |word, idx| idx.even? }
p '-----------------------------------------------'
p '3. Дан целочисленный массив. Найти количество четных элементов.'
p "m = [1,2,3,4,5,3,3,32,4]"
m = [1,2,3,4,5,3,3,32,4]
p m.select {|num| num.even?}.count
p '-----------------------------------------------'
p '4. Дан целочисленный массив. Найти количество нечетных элементов.'
p "m = [1,2,3,4,5,3,3,32,4]"
m = [1,2,3,4,5,3,3,32,4]
p m.select {|num| num.odd?}.count
p '-----------------------------------------------'
p '5. Дан целочисленный массив. Найти все четные элементы.'
p "m = [1,2,3,4,5,3,3,32,4]"
m = [1,2,3,4,5,3,3,32,4]
p m.select {|num| num.even?}
p '-----------------------------------------------'
p '6. Дан целочисленный массив. Найти все нечетные элементы.'
p "m = [1,2,3,4,5,3,3,32,4]"
m = [1,2,3,4,5,3,3,32,4]
p m.select {|num| num.odd?}
p '-----------------------------------------------'
p '7. Дано натуральное число N. Найти результат следующего произведения 1*2*…*N.'
p "n = 10"
p "factorial(n = 10)"
n = 10
def factorial(n = 0)
  (1..n).inject(:*)
end
p factorial(n = 10)
p '-----------------------------------------------'
p '8. Дан целочисленный массив. Найти минимальный четный элемент.'
p "m = [1,2,3,4,5,3,3,32,4]"
m = [1,2,3,4,5,3,3,32,4]
p m.select {|num| num.even?}.min

p '-----------------------------------------------'
p '9. Дан целочисленный массив. Найти минимальный нечетный элемент.'
p "m = [1,2,3,4,5,3,3,32,4]"
m = [1,2,3,4,5,3,3,32,4]
p m.select {|num| num.odd?}.min

p '-----------------------------------------------'
p '10. Дан целочисленный массив. Найти максимальний четный элемент.'
p "m = [1,2,3,4,5,3,3,32,4]"
m = [1,2,3,4,5,3,3,32,4]
p m.select {|num| num.even?}.max

p '-----------------------------------------------'
p '11. Дан целочисленный массив. Найти максимальний нечетный элемент.'
p "m = [1,2,3,4,5,3,3,32,4]"
m = [1,2,3,4,5,3,3,32,4,56,56,45]
p m.select {|num| num.odd?}.max


p '-----------------------------------------------'
p '12. Дан целочисленный массив. Найти индекс минимального элемента.'
p "m = [1,2,3,4,5,3,3,32,4,56,56,45]"
m = [1,2,3,4,5,3,3,32,4,56,56,45]
p m.index(m.min)

p '-----------------------------------------------'
p '13. Дан целочисленный массив. Найти индекс максимального элемента.'
p "m = [1,2,3,4,5,3,3,32,4,56,56,45]"
m = [1,2,3,4,5,3,3,32,4,56,56,45]
p m.index(m.max)
p '-----------------------------------------------'

p '14. Дан целочисленный массив. Упорядочить его по возрастанию.'
p "m = [1,2,3,4,5,3,3,32,4,56,56,45]"
m = [1,2,3,4,5,3,3,32,4,56,56,45]
p m.sort
p '-----------------------------------------------'
p '15. Дан целочисленный массив. Упорядочить его по убыванию.'
p "m = [1,2,3,4,5,3,3,32,4,56,56,45]"
m = [1,2,3,4,5,3,3,32,4,56,56,45]
p m.sort { |a, b| b <=> a }
p '-----------------------------------------------'

p '16. Дано натуральное число N. Если N - нечетное, то найти произведение 1*3*…*N; если N - четное, то найти произведение 2*4*…*N.'
p "n = rand 20"
p "some_factorial(n)"
n = rand 20 
def some_factorial(n)
    p n%2==0 ? (1..n).select {|n| n.even?}.inject(:*) : (1..n).select{|n| n.odd?}.inject(:*)
end
some_factorial(n)
p '-----------------------------------------------'
p '17. Дан целочисленный массив. Найти среднее арифметическое его элементов. '
p "arr = [1,2,3,4,4,5,5,5,56,6]"
arr = [1,2,3,4,4,5,5,5,56,6]
p arr.inject(:+)/arr.size
p '-----------------------------------------------'
p '18. Дан целочисленный массив и число К. Если существует элемент, меньший К, то вывести true; в противном случае вывести false. '
p "arr = [1, 2, 3, 59, 60, 10, 100, 200]"
p "k = 12"
p "prime(arr, k)"
arr = [1, 2, 3, 59, 60, 10, 100, 200]
k = 12
def prime(arr, k)
  is_prime = false
  for i in arr
    if i < k
      is_prime = true
    end
  end
  is_prime ? true : false 
end
p prime(arr, k)
p '-----------------------------------------------'
p '19. Дан целочисленный массив и число К. Если существует элемент, больше К, то вывести true; в противном случае вывести false. '
p "arr = [1, 2, 3, 59, 60, 10, 100, 200]"
p "k = 12"
p "prime(arr, k)"
arr = [1, 2, 3, 59, 60, 10, 100, 200]
k = 12
def prime(arr, k)
  is_prime = false
  for i in arr
    if i > k
      is_prime = true
    end
  end
  is_prime ? true : false 
end
p prime(arr, k)
p '-----------------------------------------------'
p '20. Дан целочисленный массив и число К. Если все элементы массива меньше К, то вывести true; в противном случае вывести false. '
p "arr = [1, 2, 3, 59, 60, 10, 100, 200]"
p "k = 12"
p "prime(arr, k)"
arr = [1, 2, 3, 59, 60, 10, 100, 200]
k = 300
def prime(arr, k)
  is_prime = true
  for i in arr
    if i > k
      is_prime = false
    end
  end
  is_prime ? true : false 
end
p prime(arr, k)
p '-----------------------------------------------'
p '21. Дан целочисленный массив и число К. Если все элементы массива больше К, то вывести true; в противном случае вывести false. '
p "arr = [1, 2, 3, 59, 60, 10, 100, 200]"
p "k = 12"
p "prime(arr, k)"
arr = [2, 3, 59, 60, 10, 100, 200]
k = 1
def prime(arr, k)
  is_prime = true
  for i in arr
    if i < k
      is_prime = false
    end
  end
  is_prime ? true : false 
end
p prime(arr, k)
p '-----------------------------------------------'
p '22. Дан целочисленный массив и число К. Вывести количество элементов, меньших К'
p 'arr = [2, 3, 59, 60, 10, 100, 200]'
p 'k = 15'
arr = [2, 3, 59, 60, 10, 100, 200]
k = 15
p arr.select {|num| num if num < k}.count
p '-----------------------------------------------'
p '23. Дан целочисленный массив и число К. Вывести индекс первого элемента, большего К.'
p 'arr = [2, 3, 59, 60, 10, 100, 200]'
p 'k = 15'
arr = [2, 3, 59, 60, 10, 100, 200]
k = 15
p arr.map { |x| arr.find_index(x) if x > k}.compact.first
p '-----------------------------------------------'
p '24. Дан целочисленный массив и число К. Вывести индекс последнего элемента, меньшего К.'
p 'arr = [2, 3, 59, 60, 10, 100, 200]'
p 'k = 15'
arr = [2, 3, 59, 60, 10, 100, 200]
k = 15
p arr.map {|num| arr.find_index(num) if num < k}.compact.last
p '-----------------------------------------------'
p '25. Дано число А и натуральное число N. Найти результат следующего выражения 1 + А + А*2 + А*3 + … + А*N.'
p 'a,n = 10,11'
a,n = 10,11
p (1..n).inject(1){ |s,i| s+a*i }
p '-----------------------------------------------'
p '26. Дан целочисленный массив. Возвести в квадрат отрицательные элементы и в третью степень - положительные. Нулевые элементы - не изменять'
p 'arrs=[-10, -12, 10, 0, 15, 62, -2]'
arrs=[-10, -12, 10, 0, 15, 62, -2]
p arrs.map {|num| num < 0? num**2 : num**3}
p '-----------------------------------------------'
p '27. Дан целочисленный массив. Найти среднее арифметическое модулей его элементов. '
p 'arrs=[-10, -12, 10, 0, 15, 62, -2]'
arrs=[-10, -12, 10, 0, 15, 62, -2]
p arrs.map {|num| num.abs}.sum / arrs.size
p '-----------------------------------------------'
p '28. Дано целое число. Найти сумму его цифр. '
p '74239.to_s.split('').map(&:to_i).sum'
p 74239.to_s.split('').map(&:to_i).sum
p '-----------------------------------------------'
p '29. Дано целое число. Найти произведение его цифр.'
p '74239.to_s.split('').map(&:to_i).inject(:*)'
p 74239.to_s.split('').map(&:to_i).inject(:*)
p '-----------------------------------------------'
p '30.Дан целочисленный массив. Удалить все элементы, встречающиеся ровно три раза.'
p 'av = [1,2,1,1,3,3,3,4,4,5,6]'
av = [1,2,1,1,3,3,3,4,4,5,6]
p av.each { |e| av.delete(e) if av.count(e)==3}
p '-----------------------------------------------'
p '31.Дан целочисленный массив. Удалить все элементы, встречающиеся ровно два раза.'
p 'ac = [1,2,1,2,3,3,3,4,4,5,6]'
ac = [1,2,1,2,3,3,3,4,4,5,6]
p ac.each { |e| ac.delete(e) if ac.count(e)==2}
p '-----------------------------------------------'
p '32.Дан целочисленный массив. Удалить все элементы, встречающиеся более двух раз. '
p 'ab = [1,2,1,2,3,3,3,4,4,5,6]'
ab = [1,2,1,2,3,3,3,4,4,5,6]
p ab.reject! { |elem| ab.count(elem) >= 2 }
p '-----------------------------------------------'
p '33. Дан целочисленный массив. Удалить все элементы, встречающиеся менее двух раз.'
p 'a = [1,2,1,2,3,3,3,4,4,5,6]'
a = [1,2,1,2,3,3,3,4,4,5,6]
p a.reject! { |elem| a.count(elem) <= 2 }
p '-----------------------------------------------'
p '34. Дан целочисленный массив. Найти два наибольших элемента.'
p 'p [1,2,2,3,4,5,6].max(2)'
p [1,2,2,3,4,5,6].max(2)
p '-----------------------------------------------'
p '35. Дан целочисленный массив. Найти два наименьших элемента.'
p '[1,2,2,3,4,5,6].min(2)'
p [1,2,2,3,4,5,6].min(2)
p '-----------------------------------------------'
p '36. Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.'
p 'f=[10,20,30,40,50,60]'
f=[10,20,30,40,50,60]
1.times{ f<<f.shift }
p f
p '-----------------------------------------------'
p '37. Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию.'
p 'l=[10,20,30,40,50,60,70,80]'
l=[10,20,30,40,50,60,70,80]
1.times{ l.unshift(l.pop)}
p l
p '-----------------------------------------------'
p '38. Дан целочисленный массив. Вывести номер первого из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ]'
p 'fa = [1, 7, 4, 5, 2, 1, 6, 4]'
fa = [1, 7, 4, 5, 2, 1, 6, 4]
p fa.index(fa.select { |num| fa[0] < num && num < fa[-1] }.first) || []
p '-----------------------------------------------'
p '39. Дан целочисленный массив. Вывести номер последнего из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
p 'af = [1, 5, 2, 3, 4]'
af = [1, 5, 2, 3, 4]
p af.index(af.select { |num| af[0] < num && num < af[-1] }.last) || []
p '-----------------------------------------------'
p'40. Дан целочисленный массив. Заменить все положительные элементы на значение минимального. '
p 'init = [0, -1, 2, -2, 1, 10, 12, 13]'
init = [0, -1, 2, -2, 1, 10, 12, 13]
min = init.min
p init.map! { |e| e > 0 ? min : e }
p '-----------------------------------------------'
p'41. Дан целочисленный массив. Заменить все положительные элементы на значение максимального  '
p 'initz = [0, -1, 2, -2, 1, 10, 12, 13]'
initz = [0, -1, 2, -2, 1, 10, 12, 13]
max = initz.max
p initz.map! { |e| e > 0 ? max : e }
p '-----------------------------------------------'
p '42. Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального.'
p 'ini = [0, -1, 2, -2, 1, 10, 12, 13]'
ini = [0, -1, 2, -2, 1, 10, 12, 13]
min = ini.min
p ini.map! { |e| e < 0 ? min : e }
p '-----------------------------------------------'
p '43. Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального.	'
p 'value=[-1,2,3,-10,-11,5,6,7]'
value=[-1,2,3,-10,-11,5,6,7]
max = value.max
p value.map! {|e| e < 0 ? max : e}
p '-----------------------------------------------'
p '44. Дан целочисленный массив. Найти минимальный положительный элемент.'
p 'z = [-1,23,45,6,7,8,1-3,0]'
z = [-1,23,45,6,7,8,1-3,0]
p z.map {|n| n if n>0}.compact.min
p '-----------------------------------------------'
p '45. Дан целочисленный массив. Найти максимальный отрицательный элемент.'
p 'y = [-1,23,45,6,7,8,1-3,0]'
y = [-1,23,45,6,7,8,1-3,0]
p y.map {|n| n if n<0}.compact.max
p '-----------------------------------------------'
p '46. Дан целочисленный массив. Найти среднее арифметическое квадратов его элементов.'
p 'xy = [-10, -12, 10, 0, 15, 62, -2]'
xy = [-10, -12, 10, 0, 15, 62, -2]
p xy.map {|num| num**2}.sum / xy.size
p '-----------------------------------------------'
p '47. Дан целочисленный массив. Найти количество элементов, расположенных после последнего максимального.'
p 'g = [1,6,4,5,23,7,8,1,4]'
g = [1,6,4,5,23,7,8,1,4]
p g.reverse.index(g.max)
p '-----------------------------------------------'
p '48. Дан целочисленный массив. Найти количество элементов, расположенных после последнего минимального '
p 'q = [1,6,4,5,23,7,8,4]'
q = [1,6,4,5,23,7,8,4]
p q.reverse.index(q.min)
p '-----------------------------------------------'

p '49. Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент.'
p 'b = [1,2,3,4,5,-2,3,-4]'
b = [1,2,3,4,5,-2,3,-4]
p b.inject([]) { |arr, a| arr.push(a < 0 ? a : [0, a]) }.flatten
p '-----------------------------------------------'

p '50. Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент.'
p 'c = [-1,-2,4,-3,-5,6,7,-20]'
c = [-1,-2,4,-3,-5,6,7,-20]
p c.inject([]) { |arr, a| arr.push(a > 0 ? a : [0, a]) }.flatten
p '-----------------------------------------------'







